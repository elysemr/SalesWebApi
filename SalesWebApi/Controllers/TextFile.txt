using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SalesWebApi.Models;

namespace SalesWebApi.Controllers //everything you do needs a model
{
    [Route("api/[controller]")] //after localhost etc, everything after / is called the route, route attribute says 
                    what's basic route that will lead to the controller
                    can put anything in "" as long as uniquely identifies all controllers
                    (this was generated, don't mess with it unless have reason to change it)
                    designates that this will be sending and receiving JSON data
    [ApiController]
    public class CustomersController : ControllerBase
    {
        private readonly AppDbContext _context; //db context, read only, private

        public CustomersController(AppDbContext context) //constructor, runtime environment built in passes us Dbcontext to 
                                                            our constructor and save to private, read only var
        {
            _context = context;
        }

        // GET: api/Customers
        [HttpGet] // method that retrieves all rows from the table, 
                    attribute, designates which of our HTTP methods we're going to use to call, this is get 
                    returns task bc async, ienumerable bc collection
                     <ActionResult> class designed to give us flexibility from class to determine what we return from methods
        public async Task<ActionResult<IEnumerable<Customer>>> GetCustomers()
        {
            return await _context.Customers.ToListAsync(); //list of customers from a generic list aysnc
        }

        // GET: api/Customers/5
        [HttpGet("{id}")] //get by primary key, if use parameter in attribute, has to make url unique to Id particular method to execute
                            //already have 1 method, GetAll, this method uses a Get, if methods are the same, call must be different
                            so it knows what to execute so requires particular parameter, means /tk after general URL
                            ^^if same http method type, if same method type and same url, system won't allow
                            won't be able to have another method that returns just 1 piece of data
                            surround text with {}, means variable goes inside, value after /, a piece of data
        public async Task<ActionResult<Customer>> GetCustomer(int id)
        {
            var customer = await _context.Customers.FindAsync(id);

            if (customer == null) //if don't find, return method call NotFound
                                     with one we wrote, could only return a # or null, but with action result can return something else
            {
                return NotFound(); //derived class from ActionResult so that's why we can return it
            }

            return customer; //if customer found, returns customer
        }

        // PUT: api/Customers/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCustomer(int id, Customer customer)
        {
            if (id != customer.Id)
            {
                return BadRequest();
            }

            _context.Entry(customer).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CustomerExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Customers
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Customer>> PostCustomer(Customer customer)
        {
            _context.Customers.Add(customer);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetCustomer", new { id = customer.Id }, customer);
        }

        // DELETE: api/Customers/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCustomer(int id)
        {
            var customer = await _context.Customers.FindAsync(id);
            if (customer == null)
            {
                return NotFound();
            }

            _context.Customers.Remove(customer);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool CustomerExists(int id)
        {
            return _context.Customers.Any(e => e.Id == id);
        }

        Orderlines Method:

 //Find all quantity x price for each orderline and update the order.Total with the value. The method
        //accepts an order ID as a parameter of the order update
        [HttpPut("update/{orderId}")] //tells it which put method to call
        public async Task<IActionResult> UpdateOrderLine(int orderId) //return type is same, method name is different,
                                                                      //var name must match parameter name in {}
        {
            var order = await _context.Orders.FindAsync(orderId); //find on order ID they pass in, put result in order
            if (order == null)
            {
                NotFound();
            }
            order.Total = (from ol in _context.OrderLine //load total property of order just read, all order lines
                           where ol.OrderId == orderId //where order ID matches order ID passed in
                           select new //subset of columns
                           {
                               LineTotal = ol.Quantity * ol.Price //for each line, take QxP and create new prop called line total
                           }) //wrap query syntax in () so can add aggregate linq method below
                           .Sum(x => x.LineTotal); //then sum linetotal, get one value and stored in "total"
            await _context.SaveChangesAsync(); //now total column in order has been updated and save changes
            return Ok();
        }


    }
}
